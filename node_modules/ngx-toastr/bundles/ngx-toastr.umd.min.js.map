{"version":3,"sources":["ng://ngx-toastr/toastr/toast.directive.ts","node_modules/tslib/tslib.es6.js","ng://ngx-toastr/toastr/toastr-config.ts","ng://ngx-toastr/portal/portal.ts","ng://ngx-toastr/portal/dom-portal-host.ts","ng://ngx-toastr/overlay/overlay-ref.ts","ng://ngx-toastr/overlay/overlay-container.ts","ng://ngx-toastr/overlay/overlay.ts","ng://ngx-toastr/toastr/toast-injector.ts","ng://ngx-toastr/toastr/toast-token.ts","ng://ngx-toastr/toastr/toastr.service.ts","ng://ngx-toastr/toastr/toast.component.ts","ng://ngx-toastr/toastr/default-config.ts","ng://ngx-toastr/toastr/toastr.module.ts","ng://ngx-toastr/toastr/toast-noanimation.component.ts"],"names":["ToastContainerDirective","el","this","prototype","getContainerElement","nativeElement","Directive","args","selector","exportAs","ElementRef","NgModule","declarations","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","apply","ToastPackage","toastId","config","message","title","toastType","toastRef","_this","Subject","afterClosed","subscribe","_onAction","complete","_onTap","triggerTap","next","tapToDismiss","onTap","asObservable","triggerAction","action","onAction","ComponentPortal","component","injector","attach","host","newestOnTop","_attachedHost","detach","undefined","defineProperty","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","DomPortalHost","_super","_hostDomElement","_componentFactoryResolver","_appRef","__extends","__","constructor","create","tslib_1.__extends","componentRef","componentFactory","resolveComponentFactory","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayRef","_portalHost","OverlayContainer","_containerElement","_createContainer","container","document","createElement","classList","add","body","Overlay","_overlayContainer","Map","positionClass","overlayContainer","_createOverlayRef","getPaneElement","_paneElements","get","set","_createPaneElement","pane","id","_createPortalHost","Injectable","ComponentFactoryResolver","ApplicationRef","OVERLAY_PROVIDERS","ToastRef","_overlayRef","manualClose","_manualClose","manualClosed","timeoutReset","_resetTimeout","close","_afterClosed","_activate","isInactive","isStopped","activate","afterActivate","resetTimeout","ToastInjector","_toastPackage","_parentInjector","token","notFoundValue","flags","TOAST_CONFIG","InjectionToken","ToastrService","overlay","_injector","sanitizer","ngZone","defaultConfig","defaults","toastrConfig","iconClasses","show","override","type","_preBuildNotification","applyConfig","success","error","info","warning","clear","_b","__values","o","m","Symbol","iterator","value","done","tslib_1.__values","toasts","_c","toast","remove","found","_findToast","activeToast","splice","index","currentlyActive","maxOpened","isDuplicate","resetOnDuplicate","componentInstance","onActivateTick","run","_buildNotification","toastComponent","Error","preventDuplicates","resetTimeoutOnDuplicate","previousToastMessage","keepInactive","autoDismiss","overlayRef","sanitizedMessage","enableHtml","sanitize","SecurityContext","HTML","toastPackage","toastInjector","_component","ins","onShown","onHidden","setTimeout","push","Inject","Injector","DomSanitizer","NgZone","Toast","toastrService","params","easeTime","easing","options","originalTimeout","timeOut","toastClasses","toastClass","sub","activateToast","sub1","sub2","ngOnDestroy","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","state","disableTimeOut","outsideTimeout","hideTime","Date","getTime","progressBar","outsideInterval","updateProgress","width","now","remaining","progressAnimation","tapToast","stickAround","delayedHideToast","extendedTimeOut","func","runOutsideAngular","runInsideAngular","setInterval","Component","template","animations","trigger","style","display","opacity","transition","animate","preserveWhitespaces","HostBinding","HostListener","DefaultGlobalConfig","ToastrModule","parentModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","entryComponents","decorators","Optional","SkipSelf","ToastNoAnimation","appRef","tick"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  NgModule,\n} from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n@NgModule({\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n})\nexport class ToastContainerModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { SafeHtml } from '@angular/platform-browser';\nimport { Observable, Subject } from 'rxjs';\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-injector';\n\n/**\n * Configuration for an individual toast.\n */\nexport interface IndividualConfig {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: boolean;\n  /**\n   * toast time to live in milliseconds\n   * default: 5000\n   */\n  timeOut: number;\n  /**\n   * toast show close button\n   * default: false\n   */\n  closeButton: boolean;\n  /**\n   * time to close after a user hovers over toast\n   * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation?: 'increasing' | 'decreasing';\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: toast\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on toast message\n   * default: toast-message\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n\n  /**\n   * Reset toast timeout when there's a duplicate (preventDuplicates needs to be set to true)\n   * default: false\n   */\n  resetTimeoutOnDuplicate: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap = new Subject<any>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | SafeHtml | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap(): Observable<any> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any) {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<any> {\n    return this._onAction.asObservable();\n  }\n}\n\n/* tslint:disable:no-empty-interface */\nexport interface GlobalToastrConfig extends GlobalConfig {}\nexport interface IndividualToastrConfig extends IndividualConfig {}\nexport interface ToastrConfig extends IndividualConfig {}\n","import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n","/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  private _containerElement: HTMLElement;\n\n  /**\n   * This method returns the overlay container element.  It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  private _createContainer(): void {\n    const container = document.createElement('div');\n    container.classList.add('overlay-container');\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","import { ApplicationRef, ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { OverlayRef } from './overlay-ref';\n\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\n  export class Overlay {\n    // Namespace panes by overlay container\n    private _paneElements: Map<ToastContainerDirective, {string?: HTMLElement}> = new Map();\n\n    constructor(private _overlayContainer: OverlayContainer,\n                private _componentFactoryResolver: ComponentFactoryResolver,\n                private _appRef: ApplicationRef) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass: string = '', overlayContainer?: ToastContainerDirective): HTMLElement {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\n    const pane = document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const OVERLAY_PROVIDERS = [\n  Overlay,\n  OverlayContainer,\n];\n","import { Injector, InjectFlags } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance: T;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<any>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<any>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<any>();\n  /** notifies the toast that it should reset the timeouts */\n  private _resetTimeout = new Subject<any>();\n\n  constructor(private _overlayRef: OverlayRef) {}\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset(): Observable<any> {\n    return this._resetTimeout.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n\n  /** Reset the toast timouts */\n  resetTimeout() {\n    this._resetTimeout.next();\n  }\n}\n\n/** Custom injector type specifically for instantiating components with a toast. */\nexport class ToastInjector implements Injector {\n  constructor(\n    private _toastPackage: ToastPackage,\n    private _parentInjector: Injector\n  ) {}\n\n  get<T>(token: any, notFoundValue?: T, flags?: InjectFlags): T | ToastPackage {\n    if (token === ToastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get<T>(token, notFoundValue, flags);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { GlobalConfig } from './toastr-config';\n\nexport interface ToastToken {\n  config: GlobalConfig;\n  defaults: any;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastInjector, ToastRef } from './toast-injector';\nimport { ToastToken, TOAST_CONFIG } from './toast-token';\nimport { ToastContainerDirective } from './toast.directive';\nimport { GlobalConfig, IndividualConfig, ToastPackage } from './toastr-config';\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<any>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<any>;\n  /** triggered on toast click */\n  onTap: Observable<any>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable()\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone\n  ) {\n    const defaultConfig = new token.defaults();\n    this.toastrConfig = { ...defaultConfig, ...token.config };\n    this.toastrConfig.iconClasses = {\n      ...defaultConfig.iconClasses,\n      ...token.config.iconClasses\n    };\n  }\n  /** show toast */\n  show(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {},\n    type = ''\n  ) {\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show successful toast */\n  success(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show error toast */\n  error(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show info toast */\n  info(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show warning toast */\n  warning(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (\n      this.currentlyActive < this.toastrConfig.maxOpened &&\n      this.toasts[this.currentlyActive]\n    ) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  isDuplicate(message: string, resetOnDuplicate: boolean) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].message === message) {\n        if (\n          resetOnDuplicate &&\n          this.toasts[i].toastRef.componentInstance.resetTimeout\n        ) {\n          this.toasts[i].toastRef.resetTimeout();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(\n    toastId: number\n  ): { index: number; activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() =>\n        this._buildNotification(toastType, message, title, config)\n      );\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns null if toast is duplicate and preventDuplicates == True\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    if (\n      message &&\n      this.toastrConfig.preventDuplicates &&\n      this.isDuplicate(message, this.toastrConfig.resetTimeoutOnDuplicate)\n    ) {\n      return null;\n    }\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (\n      this.toastrConfig.maxOpened &&\n      this.currentlyActive >= this.toastrConfig.maxOpened\n    ) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n    const overlayRef = this.overlay.create(\n      config.positionClass,\n      this.overlayContainer\n    );\n    this.index = this.index + 1;\n    let sanitizedMessage: string | SafeHtml | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef\n    );\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = (<any>portal)._component;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n\n    if (!keepInactive) {\n      setTimeout(() => {\n        ins.toastRef.activate();\n        this.currentlyActive = this.currentlyActive + 1;\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }}\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state(\n        'inactive',\n        style({\n          display: 'none',\n          opacity: 0\n        })\n      ),\n      state('active', style({})),\n      state('removed', style({ opacity: 0 })),\n      transition(\n        'inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))\n    ])\n  ],\n  preserveWhitespaces: false\n})\nexport class Toast implements OnDestroy {\n  message?: string | SafeHtml | null;\n  title?: string;\n  options: IndividualConfig;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut')\n  state = {\n    value: 'inactive',\n    params: {\n      easeTime: this.toastPackage.config.easeTime,\n      easing: 'ease-in'\n    }\n  };\n  private timeout: any;\n  private intervalId: any;\n  private hideTime: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (!this.options.disableTimeOut && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state, value: 'active' };\n\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = { ...this.state, value: 'removed' };\n    this.outsideTimeout(\n      () => this.toastrService.remove(this.toastPackage.toastId),\n      +this.toastPackage.config.easeTime\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      this.options.disableTimeOut ||\n      this.options.extendedTimeOut === 0 ||\n      this.state.value === 'removed'\n    ) {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.timeout = setTimeout(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.intervalId = setInterval(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: Function) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n}\n","import { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\n\nexport class DefaultGlobalConfig implements GlobalConfig {\n  // Global\n  maxOpened = 0;\n  autoDismiss = false;\n  newestOnTop = true;\n  preventDuplicates = false;\n  resetTimeoutOnDuplicate = false;\n  iconClasses = {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  };\n\n  // Individual\n  toastComponent = Toast;\n  closeButton = false;\n  disableTimeOut: false;\n  timeOut = 5000;\n  extendedTimeOut = 1000;\n  enableHtml = false;\n  progressBar = false;\n  toastClass = 'toast';\n  positionClass = 'toast-top-right';\n  titleClass = 'toast-title';\n  messageClass = 'toast-message';\n  easing = 'ease-in';\n  easeTime = 300;\n  tapToDismiss = true;\n  onActivateTick = false;\n  progressAnimation: 'decreasing' | 'increasing' = 'decreasing';\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\nimport { Overlay } from '../overlay/overlay';\nimport { OverlayContainer } from '../overlay/overlay-container';\nimport { DefaultGlobalConfig } from './default-config';\nimport { TOAST_CONFIG } from './toast-token';\nimport { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [Toast],\n  declarations: [Toast],\n  entryComponents: [Toast],\n})\nexport class ToastrModule {\n  constructor(@Optional() @SkipSelf() parentModule: ToastrModule) {\n    if (parentModule) {\n      throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        { provide: TOAST_CONFIG, useValue: { config, defaults: DefaultGlobalConfig } },\n        OverlayContainer,\n        Overlay,\n        ToastrService,\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  NgModule,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { Subscription } from 'rxjs';\r\nimport { IndividualConfig, ToastPackage } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n@Component({\r\n  selector: '[toast-component]',\r\n  template: `\r\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\r\n    {{ title }}\r\n  </div>\r\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\r\n  </div>\r\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\r\n    {{ message }}\r\n  </div>\r\n  <div *ngIf=\"options.progressBar\">\r\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\r\n  </div>\r\n  `\r\n})\r\nexport class ToastNoAnimation implements OnDestroy {\r\n  message?: string | SafeHtml | null;\r\n  title?: string;\r\n  options: IndividualConfig;\r\n  originalTimeout: number;\r\n  /** width of progress bar */\r\n  width = -1;\r\n  /** a combination of toast type and options.toastClass */\r\n  @HostBinding('class') toastClasses = '';\r\n\r\n  @HostBinding('style.display')\r\n  get displayStyle() {\r\n    if (this.state === 'inactive') {\r\n      return 'none';\r\n    }\r\n    return 'inherit';\r\n  }\r\n\r\n  /** controls animation */\r\n  state = 'inactive';\r\n  private timeout: any;\r\n  private intervalId: any;\r\n  private hideTime: number;\r\n  private sub: Subscription;\r\n  private sub1: Subscription;\r\n  private sub2: Subscription;\r\n\r\n  constructor(\r\n    protected toastrService: ToastrService,\r\n    public toastPackage: ToastPackage,\r\n    protected appRef: ApplicationRef\r\n  ) {\r\n    this.message = toastPackage.message;\r\n    this.title = toastPackage.title;\r\n    this.options = toastPackage.config;\r\n    this.originalTimeout = toastPackage.config.timeOut;\r\n    this.toastClasses = `${toastPackage.toastType} ${\r\n      toastPackage.config.toastClass\r\n    }`;\r\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\r\n      this.activateToast();\r\n    });\r\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\r\n      this.remove();\r\n    });\r\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\r\n      this.resetTimeout();\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n    this.sub1.unsubscribe();\r\n    this.sub2.unsubscribe();\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeout);\r\n  }\r\n  /**\r\n   * activates toast and sets timeout\r\n   */\r\n  activateToast() {\r\n    this.state = 'active';\r\n    if (!this.options.disableTimeOut && this.options.timeOut) {\r\n      this.timeout = setTimeout(() => {\r\n        this.remove();\r\n      }, this.options.timeOut);\r\n      this.hideTime = new Date().getTime() + this.options.timeOut;\r\n      if (this.options.progressBar) {\r\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n      }\r\n    }\r\n    if (this.options.onActivateTick) {\r\n      this.appRef.tick();\r\n    }\r\n  }\r\n  /**\r\n   * updates progress bar width\r\n   */\r\n  updateProgress() {\r\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\r\n      return;\r\n    }\r\n    const now = new Date().getTime();\r\n    const remaining = this.hideTime - now;\r\n    this.width = (remaining / this.options.timeOut) * 100;\r\n    if (this.options.progressAnimation === 'increasing') {\r\n      this.width = 100 - this.width;\r\n    }\r\n    if (this.width <= 0) {\r\n      this.width = 0;\r\n    }\r\n    if (this.width >= 100) {\r\n      this.width = 100;\r\n    }\r\n  }\r\n\r\n  resetTimeout() {\r\n    clearTimeout(this.timeout);\r\n    clearInterval(this.intervalId);\r\n    this.state = 'active';\r\n\r\n    this.options.timeOut = this.originalTimeout;\r\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\r\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tells toastrService to remove this toast after animation time\r\n   */\r\n  remove() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.state = 'removed';\r\n    this.timeout = setTimeout(() =>\r\n      this.toastrService.remove(this.toastPackage.toastId)\r\n    );\r\n  }\r\n  @HostListener('click')\r\n  tapToast() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.toastPackage.triggerTap();\r\n    if (this.options.tapToDismiss) {\r\n      this.remove();\r\n    }\r\n  }\r\n  @HostListener('mouseenter')\r\n  stickAround() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.options.timeOut = 0;\r\n    this.hideTime = 0;\r\n\r\n    // disable progressBar\r\n    clearInterval(this.intervalId);\r\n    this.width = 0;\r\n  }\r\n  @HostListener('mouseleave')\r\n  delayedHideToast() {\r\n    if (\r\n      this.options.disableTimeOut ||\r\n      this.options.extendedTimeOut === 0 ||\r\n      this.state === 'removed'\r\n    ) {\r\n      return;\r\n    }\r\n    this.timeout = setTimeout(\r\n      () => this.remove(),\r\n      this.options.extendedTimeOut\r\n    );\r\n    this.options.timeOut = this.options.extendedTimeOut;\r\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastNoAnimation],\r\n  exports: [ToastNoAnimation],\r\n  entryComponents: [ToastNoAnimation]\r\n})\r\nexport class ToastNoAnimationModule {}\r\n"]}